
Getting and Cleaning Data Project Straight Code

Abu Nayeem

September 21, 2014


UPDATE: I wanted to make the code more automatic and R markdown compatible


Preprocessing
if (!getwd() == "./out-of-box-samples") {
    dir.create("./out-of-box-samples")
}
## Warning: './out-of-box-samples' already exists
rm(list = ls(all = TRUE))
library(plyr) # load plyr first, then dplyr 
library(data.table) # a prockage that handles dataframe better
library(dplyr) # for fancy data table manipulations and organization

I download the zip file in a temporary folder
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp)
unzip(temp, list = TRUE) #This provides the list of variables and I choose the ones that are applicable for this data set
YTest <- read.table(unzip(temp, "UCI HAR Dataset/test/y_test.txt"))
XTest <- read.table(unzip(temp, "UCI HAR Dataset/test/X_test.txt"))
SubjectTest <- read.table(unzip(temp, "UCI HAR Dataset/test/subject_test.txt"))
YTrain <- read.table(unzip(temp, "UCI HAR Dataset/train/y_train.txt"))
XTrain <- read.table(unzip(temp, "UCI HAR Dataset/train/X_train.txt"))
SubjectTrain <- read.table(unzip(temp, "UCI HAR Dataset/train/subject_train.txt"))
Features <- read.table(unzip(temp, "UCI HAR Dataset/features.txt"))
unlink(temp) # very important to remove this


Data Cleaning

Fix Column Names:
colnames(XTrain) <- t(Features[2])
colnames(XTest) <- t(Features[2])

It’s having faith that the merge of X and Y Train set align since there is no common ID
XTrain$activities <- YTrain[, 1]
XTrain$participants <- SubjectTrain[, 1]
XTest$activities <- YTest[, 1]
XTest$participants <- SubjectTest[, 1]


Assignment 1

Task: Merges the training and the test sets to create one data set.
Master <- rbind(XTrain, XTest)
duplicated(colnames(Master))
Master <- Master[, !duplicated(colnames(Master))]


Assignment 2

Task: Extracts only the measurements on the mean and standard deviation for each measurement.
Mean <- grep("mean()", names(Master), value = FALSE, fixed = TRUE)
#In addition, we need to include 555:559 as they have means and are associated with the gravity terms
Mean <- append(Mean, 471:477)
InstrumentMeanMatrix <- Master[Mean]
# For STD
STD <- grep("std()", names(Master), value = FALSE)
InstrumentSTDMatrix <- Master[STD]


Assignment 3

Task: Uses descriptive activity names to name the activities in the data set

Changing the class is useful for replacing strings
Master$activities <- as.character(Master$activities)
Master$activities[Master$activities == 1] <- "Walking"
Master$activities[Master$activities == 2] <- "Walking Upstairs"
Master$activities[Master$activities == 3] <- "Walking Downstairs"
Master$activities[Master$activities == 4] <- "Sitting"
Master$activities[Master$activities == 5] <- "Standing"
Master$activities[Master$activities == 6] <- "Laying"
Master$activities <- as.factor(Master$activities)


Assignment 4

Task: Appropriately labels the data set with descriptive variable names.
names(Master)  # survey the data

Here is a list of unclear acronyms and pairs; Note I will not change the operation name because it explains the command that was used and they are lengthy; for more info read the data library or R help

^t-time; ^f-frequency; Acc-Accelerator; Gyro-Gyroscope; Mag-Magnitude

Use gsub to replace that list
names(Master) <- gsub("Acc", "Accelerator", names(Master))
names(Master) <- gsub("Mag", "Magnitude", names(Master))
names(Master) <- gsub("Gyro", "Gyroscope", names(Master))
names(Master) <- gsub("^t", "time", names(Master))
names(Master) <- gsub("^f", "frequency", names(Master))

Change participants names
Master$participants <- as.character(Master$participants)
Master$participants[Master$participants == 1] <- "Participant 1"
Master$participants[Master$participants == 2] <- "Participant 2"
Master$participants[Master$participants == 3] <- "Participant 3"
Master$participants[Master$participants == 4] <- "Participant 4"
Master$participants[Master$participants == 5] <- "Participant 5"
Master$participants[Master$participants == 6] <- "Participant 6"
Master$participants[Master$participants == 7] <- "Participant 7"
Master$participants[Master$participants == 8] <- "Participant 8"
Master$participants[Master$participants == 9] <- "Participant 9"
Master$participants[Master$participants == 10] <- "Participant 10"
Master$participants[Master$participants == 11] <- "Participant 11"
Master$participants[Master$participants == 12] <- "Participant 12"
Master$participants[Master$participants == 13] <- "Participant 13"
Master$participants[Master$participants == 14] <- "Participant 14"
Master$participants[Master$participants == 15] <- "Participant 15"
Master$participants[Master$participants == 16] <- "Participant 16"
Master$participants[Master$participants == 17] <- "Participant 17"
Master$participants[Master$participants == 18] <- "Participant 18"
Master$participants[Master$participants == 19] <- "Participant 19"
Master$participants[Master$participants == 20] <- "Participant 20"
Master$participants[Master$participants == 21] <- "Participant 21"
Master$participants[Master$participants == 22] <- "Participant 22"
Master$participants[Master$participants == 23] <- "Participant 23"
Master$participants[Master$participants == 24] <- "Participant 24"
Master$participants[Master$participants == 25] <- "Participant 25"
Master$participants[Master$participants == 26] <- "Participant 26"
Master$participants[Master$participants == 27] <- "Participant 27"
Master$participants[Master$participants == 28] <- "Participant 28"
Master$participants[Master$participants == 29] <- "Participant 29"
Master$participants[Master$participants == 30] <- "Participant 30"
Master$participants <- as.factor(Master$participants)

Remark the data is more descriptive but a lot more wordy.


Assignment 5-

Task: Create a tidy data set
Master.dt <- data.table(Master)
#This takes the mean of every column broken down by participants and activities
TidyData <- Master.dt[, lapply(.SD, mean), by = 'participants,activities']
write.table(TidyData, file = "Tidy.txt", row.names = FALSE)

Complete [see annotations in ReadMe]


2222222222222222222222222222222222222222222222222222222222222222222222

# run_analysis.R

# course project script


# Preliminary: 


# Get the data.  it's in a zip file, so download contents
# from "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
# Then, gather the relevant files into a folder to be named "UCIHAR" in your working directory


# The code:


# 1. Read the data files into R:

subtest <- read.table("./UCIHAR/subject_test.txt")

xtest <- read.table("./UCIHAR/X_test.txt")

ytest <- read.table("./UCIHAR/Y_test.txt")

subtrain <- read.table("./UCIHAR/subject_train.txt")

xtrain <- read.table("./UCIHAR/X_train.txt")

ytrain <- read.table("./UCIHAR/Y_train.txt")

features <- read.table("./UCIHAR/features.txt")

activities <- read.table("./UCIHAR/activity_labels.txt")



# 2. Merge all that data into one dataset

xall <- rbind(xtrain, xtest)

yall <- rbind(ytrain, ytest)

suball <- rbind(subtrain, subtest)

allofit <- cbind(suball, yall, xall)



rm(xtest,ytest,xtrain,ytrain,subtrain,subtest,xall,yall,suball)  

# housecleaning


# 3. Name the measurement columns after the feature names
featureNames <- as.character(features[,2])

newCols <- c("subject", "activity", featureNames)

colnames(allofit) <- newCols



# 4. Create a new data frame whose measurement columns contain only mean and st. dev features


onlyMeans <- grep("mean()", colnames(allofit))

onlyStDevs <- grep("std()", colnames(allofit))

revisedColumns <- c(onlyMeans, onlyStDevs)

revisedColumns2 <- sort(revisedColumns) 

newDataFrame <- allofit[, c(1,2,revisedColumns2)]

newDataFrame2 <- newDataFrame[, !grepl("Freq", colnames(newDataFrame))] #get rid of the meanFreq columns



rm(newDataFrame, allofit)  # more housecleaning, those data frames are taking up a lot of space/RAM



# 5. Trim the rows to the 180 needed to show mean values for each subject-activity pair

tidyframe <- data.frame()

	for (i in 1:30) {
        
		subj<- subset(newDataFrame2,subject==i)
        
		for (j in 1:6){
                
			actv<- subset(subj, activity==j)
                
			myresult<-as.vector(apply(actv,2,mean))
                
			tidyframe<-rbind(tidyframe,myresult) 
        
			}
        

	}



# 6. Rename stuff and output the data to "Samsung_Data.txt"

colnames(tidyframe)<-colnames(newDataFrame2) #rename the columns again, as the names get lost in the mix above

levels(tidyframe[,2])<-c('walk','upstairswalk','downstairswalk', 'sit','stand', 'lay')

write.table(tidyframe, "Samsung_Data.txt", sep = "")



33333333333333333333333333333333333333333333333333333333333333333333

library(plyr) 
2 
 
3 # Step 1 
4 # Merge the training and test sets to create one data set 
5 ############################################################################### 
6 
 
7 x_train <- read.table("train/X_train.txt") 
8 y_train <- read.table("train/y_train.txt") 
9 subject_train <- read.table("train/subject_train.txt") 
10 
 
11 x_test <- read.table("test/X_test.txt") 
12 y_test <- read.table("test/y_test.txt") 
13 subject_test <- read.table("test/subject_test.txt") 
14 
 
15 # create 'x' data set 
16 x_data <- rbind(x_train, x_test) 
17 
 
18 # create 'y' data set 
19 y_data <- rbind(y_train, y_test) 
20 
 
21 # create 'subject' data set 
22 subject_data <- rbind(subject_train, subject_test) 
23 
 
24 # Step 2 
25 # Extract only the measurements on the mean and standard deviation for each measurement 
26 ############################################################################### 
27 
 
28 features <- read.table("features.txt") 
29 
 
30 # get only columns with mean() or std() in their names 
31 mean_and_std_features <- grep("-(mean|std)\\(\\)", features[, 2]) 
32 
 
33 # subset the desired columns 
34 x_data <- x_data[, mean_and_std_features] 
35 
 
36 # correct the column names 
37 names(x_data) <- features[mean_and_std_features, 2] 
38 
 
39 # Step 3 
40 # Use descriptive activity names to name the activities in the data set 
41 ############################################################################### 
42 
 
43 activities <- read.table("activity_labels.txt") 
44 
 
45 # update values with correct activity names 
46 y_data[, 1] <- activities[y_data[, 1], 2] 
47 
 
48 # correct column name 
49 names(y_data) <- "activity" 
50 
 
51 # Step 4 
52 # Appropriately label the data set with descriptive variable names 
53 ############################################################################### 
54 
 
55 # correct column name 
56 names(subject_data) <- "subject" 
57 
 
58 # bind all the data in a single data set 
59 all_data <- cbind(x_data, y_data, subject_data) 
60 
 
61 # Step 5 
62 # Create a second, independent tidy data set with the average of each variable 
63 # for each activity and each subject 
64 ############################################################################### 
65 
 
66 # 66 <- 68 columns but last two (activity & subject) 
67 averages_data <- ddply(all_data, .(subject, activity), function(x) colMeans(x[, 1:66])) 
68 
 
69 write.table(averages_data, "averages_data.txt", row.name=FALSE) 

